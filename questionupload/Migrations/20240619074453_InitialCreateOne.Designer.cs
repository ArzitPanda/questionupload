// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using questionupload.Data;

#nullable disable

namespace questionupload.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240619074453_InitialCreateOne")]
    partial class InitialCreateOne
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("questionupload.Data.Model.Accessibility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessibilityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Accessibilities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessibilityName = "all"
                        });
                });

            modelBuilder.Entity("questionupload.Data.Model.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1L,
                            RoleName = "admin"
                        });
                });

            modelBuilder.Entity("questionupload.Data.Model.RoleAccessibility", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("AccessibilityId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "AccessibilityId");

                    b.HasIndex("AccessibilityId");

                    b.ToTable("RoleAccessibilities");

                    b.HasData(
                        new
                        {
                            RoleId = 1L,
                            AccessibilityId = 1L
                        });
                });

            modelBuilder.Entity("questionupload.Data.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Password = "admin123",
                            RoleId = 1L,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("questionupload.Data.Model.UserDetails", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("College")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.ToTable("UserDetails");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            College = "Admin College",
                            Dob = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Admin Location",
                            Qualification = "Admin Qualification"
                        });
                });

            modelBuilder.Entity("questionupload.Data.Model.RoleAccessibility", b =>
                {
                    b.HasOne("questionupload.Data.Model.Accessibility", "Accessibility")
                        .WithMany("RoleAccessibilities")
                        .HasForeignKey("AccessibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("questionupload.Data.Model.Role", "Role")
                        .WithMany("RoleAccessibilities")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accessibility");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("questionupload.Data.Model.User", b =>
                {
                    b.HasOne("questionupload.Data.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("questionupload.Data.Model.UserDetails", b =>
                {
                    b.HasOne("questionupload.Data.Model.User", "User")
                        .WithOne("UserDetails")
                        .HasForeignKey("questionupload.Data.Model.UserDetails", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("questionupload.Data.Model.Accessibility", b =>
                {
                    b.Navigation("RoleAccessibilities");
                });

            modelBuilder.Entity("questionupload.Data.Model.Role", b =>
                {
                    b.Navigation("RoleAccessibilities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("questionupload.Data.Model.User", b =>
                {
                    b.Navigation("UserDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
